package com.diego_hernando.bitStamp_java_lib;

import java.util.HashMap;
import java.util.Map;

public enum BitStampCurrencyPairs {


	BTCUSD("btcusd"),
	BTCEUR("btceur"),
	BTCGBP("btcgbp"),
	BTCPAX("btcpax"),
	GBPUSD("gbpusd"),
	EURUSD("eurusd"),
	XRPUSD("xrpusd"),
	XRPEUR("xrpeur"),
	XRPBTC("xrpbtc"),
	XRPGBP("xrpgbp"),
	LTCBTC("ltcbtc"),
	LTCUSD("ltcusd"),
	LTCEUR("ltceur"),
	LTCGBP("ltcgbp"),
	ETHBTC("ethbtc"),
	ETHUSD("ethusd"),
	ETHEUR("etheur"),
	ETHGBP("ethgbp"),
	ETHPAX("ethpax"),
	BCHUSD("bchusd"),
	BCHEUR("bcheur"),
	BCHBTC("bchbtc"),
	PAXUSD("paxusd"),
	XLMBTC("xlmbtc"),
	XLMUSD("xlmusd"),
	XLMEUR("xlmeur"),
	XLMGBP("xlmgbp"),
	LINKUSD("linkusd"),
	LINKEUR("linkeur"),
	LINKGBP("linkgbp"),
	LINKBTC("linkbtc"),
	USDCUSD("usdcusd"),
	USDCEUR("usdceur"),
	BTCUSDC("btcusdc"),
	ETHUSDC("ethusdc"),
	ETH2ETH("eth2eth"),
	AAVEUSD("aaveusd"),
	AAVEEUR("aaveeur"),
	AAVEBTC("aavebtc"),
	BATUSD("batusd"),
	BATEUR("bateur"),
	UMAUSD("umausd"),
	UMAEUR("umaeur"),
	DAIUSD("daiusd"),
	KNCUSD("kncusd"),
	KNCEUR("knceur"),
	MKRUSD("mkrusd"),
	MKREUR("mkreur"),
	ZRXUSD("zrxusd"),
	ZRXEUR("zrxeur"),
	GUSDUSD("gusdusd"),
	ALGOUSD("algousd"),
	ALGOEUR("algoeur"),
	ALGOBTC("algobtc"),
	AUDIOUSD("audiousd"),
	AUDIOEUR("audioeur"),
	AUDIOBTC("audiobtc"),
	CRVUSD("crvusd"),
	CRVEUR("crveur"),
	SNXUSD("snxusd"),
	SNXEUR("snxeur"),
	UNIUSD("uniusd"),
	UNIEUR("unieur"),
	UNIBTC("unibtc"),
	YFIUSD("yfiusd"),
	YFIEUR("yfieur"),
	COMPUSD("compusd"),
	COMPEUR("compeur"),
	GRTUSD("grtusd"),
	GRTEUR("grteur"),
	LRCUSD("lrcusd"),
	LRCEUR("lrceur"),
	USDTUSD("usdtusd"),
	USDTEUR("usdteur"),
	USDCUSDT("usdcusdt"),
	BTCUSDT("btcusdt"),
	ETHUSDT("ethusdt"),
	XRPUSDT("xrpusdt"),
	EURTEUR("eurteur"),
	EURTUSD("eurtusd"),
	FLRUSD("flrusd"),
	FLREUR("flreur"),
	MANAUSD("manausd"),
	MANAEUR("manaeur"),
	MATICUSD("maticusd"),
	MATICEUR("maticeur"),
	SUSHIUSD("sushiusd"),
	SUSHIEUR("sushieur"),
	CHZUSD("chzusd"),
	CHZEUR("chzeur"),
	ENJUSD("enjusd"),
	ENJEUR("enjeur"),
	HBARUSD("hbarusd"),
	HBAREUR("hbareur"),
	ALPHAUSD("alphausd"),
	ALPHAEUR("alphaeur"),
	AXSUSD("axsusd"),
	AXSEUR("axseur"),
	SANDUSD("sandusd"),
	SANDEUR("sandeur"),
	STORJUSD("storjusd"),
	STORJEUR("storjeur"),
	ADAUSD("adausd"),
	ADAEUR("adaeur"),
	ADABTC("adabtc"),
	FETUSD("fetusd"),
	FETEUR("feteur"),
	SKLUSD("sklusd"),
	SKLEUR("skleur"),
	SLPUSD("slpusd"),
	SLPEUR("slpeur"),
	SXPUSD("sxpusd"),
	SXPEUR("sxpeur"),
	SGBUSD("sgbusd"),
	SGBEUR("sgbeur"),
	AVAXUSD("avaxusd"),
	AVAXEUR("avaxeur"),
	DYDXUSD("dydxusd"),
	DYDXEUR("dydxeur"),
	FTMUSD("ftmusd"),
	FTMEUR("ftmeur"),
	SHIBUSD("shibusd"),
	SHIBEUR("shibeur"),
	AMPUSD("ampusd"),
	AMPEUR("ampeur"),
	ENSUSD("ensusd"),
	ENSEUR("enseur"),
	GALAUSD("galausd"),
	GALAEUR("galaeur"),
	PERPUSD("perpusd"),
	PERPEUR("perpeur"),
	WBTCBTC("wbtcbtc"),
	CTSIUSD("ctsiusd"),
	CTSIEUR("ctsieur"),
	CVXUSD("cvxusd"),
	CVXEUR("cvxeur"),
	IMXUSD("imxusd"),
	IMXEUR("imxeur"),
	NEXOUSD("nexousd"),
	NEXOEUR("nexoeur"),
	ANTUSD("antusd"),
	ANTEUR("anteur"),
	GODSUSD("godsusd"),
	GODSEUR("godseur"),
	RADUSD("radusd"),
	RADEUR("radeur"),
	BANDUSD("bandusd"),
	BANDEUR("bandeur"),
	INJUSD("injusd"),
	INJEUR("injeur"),
	RLYUSD("rlyusd"),
	RLYEUR("rlyeur"),
	RNDRUSD("rndrusd"),
	RNDREUR("rndreur"),
	VEGAUSD("vegausd"),
	VEGAEUR("vegaeur"),
	SOLUSD("solusd"),
	SOLEUR("soleur"),
	APEUSD("apeusd"),
	APEEUR("apeeur"),
	MPLUSD("mplusd"),
	MPLEUR("mpleur"),
	EUROCUSDC("eurocusdc"),
	EUROCEUR("euroceur"),
	DOTUSD("dotusd"),
	DOTEUR("doteur"),
	NEARUSD("nearusd"),
	NEAREUR("neareur"),
	LDOUSD("ldousd"),
	LDOEUR("ldoeur"),
	DGLDUSD("dgldusd"),
	DGLDEUR("dgldeur"),
	DOGEUSD("dogeusd"),
	DOGEEUR("dogeeur"),
	SUIUSD("suiusd"),
	SUIEUR("suieur"),
	EURCVUSDT("eurcvusdt"),
	EURCVEUR("eurcveur"),
	PYUSDUSD("pyusdusd"),
	PYUSDEUR("pyusdeur"),
	TRACUSD("tracusd"),
	TRACEUR("traceur"),
	WECANUSD("wecanusd"),
	WECANEUR("wecaneur");
	
	
	private String currencyPair;
	private static Map<String,BitStampCurrencyPairs> mapForFindValues;
	
	private static Map<String,BitStampCurrencyPairs> getMapForFindValues(){
		if(mapForFindValues==null) {
			mapForFindValues=new HashMap<>();
		}
		return mapForFindValues;
	}
	
	BitStampCurrencyPairs(String currencyPair){
		Map<String,BitStampCurrencyPairs> mapValues=getMapForFindValues();
				
		this.currencyPair=currencyPair;
		mapValues.put(currencyPair, this);
	}
	
	@Override
	public String toString() {
		return this.currencyPair;
		
	}
	
	
	public static BitStampCurrencyPairs findValue(String value) {
		return mapForFindValues.get(value);
		
	}

}

